[tool.poetry]
name = "netconfigmaster"
version = "0.1.0"
description = "A machine learning project that translates natural language into Nmstate YAML configurations"
authors = ["Thembo Jonathan <jona42-ui@example.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/jona42-ui/netconfigmaster"
repository = "https://github.com/jona42-ui/netconfigmaster"
keywords = ["machine-learning", "nlp", "network-configuration", "nmstate", "yaml"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.8"
transformers = ">=4.33.2"
datasets = ">=2.18.0"
torch = ">=2.2.1"
PyYAML = ">=6.0.1"
python-Levenshtein = ">=0.25.1"
flask = "^2.3.0"
gradio = "^4.0.0"
libnmstate = "^2.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
black = "^23.0.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
pylint = "^2.17.0"
mypy = "^1.5.0"
pre-commit = "^3.0.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.0"
mkdocs-material = "^9.0.0"
mkdocstrings = "^0.23.0"

[tool.poetry.scripts]
netconfig-train = "src.train:main"
netconfig-pretrain = "src.pretrain:main"
netconfig-evaluate = "src.model_evaluation:main"
netconfig-ui = "src.ui:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "metrics"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
addopts = "-v --cov=src --cov=metrics --cov-report=html --cov-report=term-missing"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.coverage.run]
source = ["src", "metrics"]
omit = ["*/tests/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
