name: Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

jobs:
  # Determine Version
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      changelog: ${{ steps.version.outputs.changelog }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Calculate version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # Manual release
          CURRENT_VERSION=$(git tag -l "v*" | sort -V | tail -1 | sed 's/v//')
          if [ -z "$CURRENT_VERSION" ]; then
            CURRENT_VERSION="0.0.0"
          fi
          
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case "${{ github.event.inputs.release_type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          TAG="v$NEW_VERSION"
        else
          # Tag-based release
          TAG=${GITHUB_REF#refs/tags/}
          NEW_VERSION=${TAG#v}
        fi
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        
        # Generate changelog since last tag
        LAST_TAG=$(git tag -l "v*" | sort -V | tail -2 | head -1)
        if [ -z "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" --no-merges)
        else
          CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --no-merges)
        fi
        
        # Format changelog for GitHub release
        CHANGELOG_ESCAPED=$(echo "$CHANGELOG" | sed 's/"/\\"/g' | tr '\n' '\\' | sed 's/\\/\\n/g')
        echo "changelog=$CHANGELOG_ESCAPED" >> $GITHUB_OUTPUT

  # Build and Test
  build:
    runs-on: ubuntu-latest
    needs: version
    strategy:
      matrix:
        target: [production, training, evaluation]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        target: ${{ matrix.target }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version.outputs.tag }}-${{ matrix.target }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest-${{ matrix.target }}
        labels: |
          org.opencontainers.image.title=NetConfigMaster
          org.opencontainers.image.description=Network Configuration Master
          org.opencontainers.image.version=${{ needs.version.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.repository.updated_at }}

  # Create Python Package
  package:
    runs-on: ubuntu-latest
    needs: version
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Update version in pyproject.toml
      run: |
        poetry version ${{ needs.version.outputs.version }}

    - name: Build package
      run: poetry build

    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

    - name: Publish to PyPI
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
      run: poetry publish

  # Create GitHub Release
  release:
    runs-on: ubuntu-latest
    needs: [version, build, package]
    if: always() && (needs.build.result == 'success' && needs.package.result == 'success')
    
    steps:
    - uses: actions/checkout@v4

    - name: Download package artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/

    - name: Create Git tag
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git tag -a ${{ needs.version.outputs.tag }} -m "Release ${{ needs.version.outputs.tag }}"
        git push origin ${{ needs.version.outputs.tag }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.version.outputs.tag }}
        name: Release ${{ needs.version.outputs.version }}
        body: |
          ## üöÄ NetConfigMaster ${{ needs.version.outputs.version }}
          
          ### What's New
          ${{ needs.version.outputs.changelog }}
          
          ### üì¶ Installation
          
          ```bash
          # Using Poetry
          poetry add netconfigmaster
          
          # Using pip
          pip install netconfigmaster
          
          # Using Docker
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version.outputs.tag }}-production
          ```
          
          ### üê≥ Docker Images
          - `production`: Ready-to-run web application
          - `training`: Model training environment
          - `evaluation`: Model evaluation environment
          
          ### üìä Metrics
          - Multi-platform support (amd64, arm64)
          - Comprehensive security scanning
          - Full test coverage
          
          See the [CHANGELOG](CHANGELOG.md) for detailed changes.
        files: |
          dist/*
        draft: false
        prerelease: false
        generate_release_notes: true

  # Update Documentation
  update-docs:
    runs-on: ubuntu-latest
    needs: [version, release]
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update CHANGELOG.md
      run: |
        DATE=$(date +%Y-%m-%d)
        sed -i "s/## \[Unreleased\]/## [Unreleased]\n\n## [${{ needs.version.outputs.version }}] - $DATE/" CHANGELOG.md
        
        # Add changelog entries
        echo -e "\n### Added\n- Release ${{ needs.version.outputs.version }}" >> temp_changelog.md
        echo -e "\n### Changed\n${{ needs.version.outputs.changelog }}" >> temp_changelog.md
        
        # Insert into CHANGELOG.md after the version header
        sed -i "/## \[${{ needs.version.outputs.version }}\] - $DATE/r temp_changelog.md" CHANGELOG.md
        rm temp_changelog.md

    - name: Update README badges
      run: |
        sed -i "s/v[0-9]*\.[0-9]*\.[0-9]*/v${{ needs.version.outputs.version }}/g" README.md

    - name: Commit documentation updates
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git add CHANGELOG.md README.md
        git commit -m "docs: update for release ${{ needs.version.outputs.version }}" || exit 0
        git push

  # Post-release tasks
  post-release:
    runs-on: ubuntu-latest
    needs: [version, release]
    
    steps:
    - name: Create issue for next release planning
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Plan next release after ${{ needs.version.outputs.version }}`,
            body: `üéâ Release ${{ needs.version.outputs.version }} has been successfully created!
            
            ## Next Steps:
            - [ ] Review release metrics and feedback
            - [ ] Plan features for next release
            - [ ] Update roadmap documentation
            - [ ] Consider dependency updates
            
            ## Release Stats:
            - Docker images published: ‚úÖ
            - PyPI package published: ‚úÖ
            - GitHub release created: ‚úÖ
            - Documentation updated: ‚úÖ
            
            This issue was automatically created by the release workflow.`,
            labels: ['release', 'planning', 'enhancement']
          })

    - name: Notify success
      run: |
        echo "üéâ Release ${{ needs.version.outputs.version }} completed successfully!"
        echo "üì¶ Package: https://pypi.org/project/netconfigmaster/"
        echo "üê≥ Docker: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version.outputs.tag }}-production"
        echo "üìã Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.version.outputs.tag }}"
