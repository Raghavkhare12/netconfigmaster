name: PR Automation

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  # Auto-label PRs based on changes
  auto-label:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Auto-label based on files changed
      uses: actions/labeler@v4
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        configuration-path: .github/labeler.yml

    - name: Label based on PR size
      uses: codelytv/pr-size-labeler@v1
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        xs_label: 'size/XS'
        xs_max_size: '10'
        s_label: 'size/S'
        s_max_size: '100'
        m_label: 'size/M'
        m_max_size: '500'
        l_label: 'size/L'
        l_max_size: '1000'
        xl_label: 'size/XL'
        message_if_xl: 'This PR is very large. Consider breaking it into smaller PRs.'

  # PR Quality Checks
  pr-quality:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check PR title format
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          test
          ci
          chore
        requireScope: false
        disallowScopes: |
          release
        subjectPattern: ^(?![A-Z]).+$
        subjectPatternError: |
          The subject "%s" found in the pull request title "%s"
          didn't match the configured pattern. Please ensure that the subject
          doesn't start with an uppercase character.

    - name: Check for breaking changes
      run: |
        if git log --format=%B ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -qi "BREAKING CHANGE"; then
          echo "breaking_change=true" >> $GITHUB_ENV
        else
          echo "breaking_change=false" >> $GITHUB_ENV
        fi

    - name: Add breaking change label
      if: env.breaking_change == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            labels: ['breaking-change']
          })

    - name: Check for security-sensitive changes
      run: |
        SECURITY_FILES="src/security|Dockerfile|pyproject.toml|requirements.txt|.github/workflows/security.yml"
        if git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -E "$SECURITY_FILES"; then
          echo "security_sensitive=true" >> $GITHUB_ENV
        else
          echo "security_sensitive=false" >> $GITHUB_ENV
        fi

    - name: Add security review label
      if: env.security_sensitive == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            labels: ['security-review-required']
          })

  # Automated PR Checks
  pr-checks:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Check for required files
      run: |
        REQUIRED_FILES=("CHANGELOG.md" "README.md" "pyproject.toml")
        MISSING_FILES=()
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            MISSING_FILES+=("$file")
          fi
        done
        
        if [ ${#MISSING_FILES[@]} -gt 0 ]; then
          echo "Missing required files: ${MISSING_FILES[*]}"
          exit 1
        fi

    - name: Check CHANGELOG update
      run: |
        if ! git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -q "CHANGELOG.md"; then
          if [ "${{ github.event.pull_request.draft }}" != "true" ]; then
            echo "::warning::CHANGELOG.md not updated. Consider updating it for significant changes."
          fi
        fi

    - name: Check for TODO/FIXME comments
      run: |
        TODO_COUNT=$(git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -c "^+.*\(TODO\|FIXME\|XXX\|HACK\)" || true)
        if [ $TODO_COUNT -gt 0 ]; then
          echo "::warning::Found $TODO_COUNT new TODO/FIXME comments. Consider addressing them before merging."
        fi

  # Auto-assign reviewers
  auto-assign:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'

    steps:
    - name: Auto-assign reviewers
      uses: kentaro-m/auto-assign-action@v1.2.5
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  # Dependency review for security
  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
        deny-licenses: GPL-2.0, GPL-3.0

  # Comment-based commands
  pr-commands:
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Handle /format command
      if: contains(github.event.comment.body, '/format')
      run: |
        echo "Formatting code..."
        # This would trigger formatting
        echo "Code formatting requested by @${{ github.event.comment.user.login }}"

    - name: Handle /test command
      if: contains(github.event.comment.body, '/test')
      run: |
        echo "Running tests..."
        # This would trigger test runs
        echo "Test run requested by @${{ github.event.comment.user.login }}"

    - name: Handle /docs command
      if: contains(github.event.comment.body, '/docs')
      run: |
        echo "Generating documentation..."
        # This would trigger doc generation
        echo "Documentation generation requested by @${{ github.event.comment.user.login }}"

  # PR merge automation
  auto-merge:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request_review' &&
      github.event.review.state == 'approved' &&
      contains(github.event.pull_request.labels.*.name, 'auto-merge')

    steps:
    - name: Enable auto-merge
      uses: pascalgn/merge-action@v0.15.6
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        merge_method: squash

  # PR status updates
  pr-status:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Update PR status
      uses: actions/github-script@v6
      with:
        script: |
          const pr = context.payload.pull_request;
          const labels = pr.labels.map(l => l.name);
          
          let statusEmoji = '🔄';
          let statusText = 'In Progress';
          
          if (labels.includes('ready-to-merge')) {
            statusEmoji = '✅';
            statusText = 'Ready to Merge';
          } else if (labels.includes('work-in-progress')) {
            statusEmoji = '🚧';
            statusText = 'Work in Progress';
          } else if (labels.includes('needs-review')) {
            statusEmoji = '👀';
            statusText = 'Needs Review';
          }
          
          const body = pr.body || '';
          const statusSection = `## Status\n${statusEmoji} **${statusText}**\n\n`;
          
          // Update PR body with status (simplified - would need more complex logic for real implementation)
          console.log(`PR Status: ${statusText}`);

  # Generate PR summary
  pr-summary:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate PR summary
      run: |
        # Calculate PR statistics
        FILES_CHANGED=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | wc -l)
        LINES_ADDED=$(git diff --numstat ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | awk '{sum += $1} END {print sum}')
        LINES_DELETED=$(git diff --numstat ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | awk '{sum += $2} END {print sum}')
        COMMITS=$(git rev-list --count ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})
        
        echo "## 📊 PR Summary" >> pr_summary.md
        echo "" >> pr_summary.md
        echo "- 📁 Files changed: $FILES_CHANGED" >> pr_summary.md
        echo "- ➕ Lines added: $LINES_ADDED" >> pr_summary.md
        echo "- ➖ Lines deleted: $LINES_DELETED" >> pr_summary.md
        echo "- 📝 Commits: $COMMITS" >> pr_summary.md
        echo "" >> pr_summary.md
        
        # Add affected modules
        echo "### 🎯 Affected Areas:" >> pr_summary.md
        git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | \
        cut -d'/' -f1 | sort | uniq | while read dir; do
          echo "- $dir/" >> pr_summary.md
        done

    - name: Comment PR summary
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('pr_summary.md', 'utf8');
          
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: summary
          })
